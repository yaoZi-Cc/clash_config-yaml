proxy-providers:
  text1:
    url: "url"
    type: http
    interval: 86400
    header:
      User-Agent:
      - "Clash.meta"
      - "Clash"
      - "mihomo"
    health-check:
      enable: true
      url: https://www.gstatic.com/generate_204
      interval: 300
    proxy: 直连
    override:
      udp: true
      skip-cert-verify: true

# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板
external-controller: 0.0.0.0:9090
secret: ""
external-ui: "/etc/mihomo/run/ui"
external-ui-name: zashboard
external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
 
# 出站策略
# 注意锚点必须放在引用的上方，可以集中把锚点全部放yaml的顶部。
pr: &pr {type: select, proxies: [🚀 默认代理, HK 香港节点, US 美国节点, JP 日本节点, SG 新加坡节点, KR 韩国节点, FR 法国节点, DE 德国节点, IE 爱尔兰节点, IN 印度节点, RU 俄罗斯节点, UK 英国节点, CA 加拿大节点, Next generation节点, ASYNCHRONOUS节点, ♻️ 香港自动, ♻️ 美国自动, ♻️ 日本自动, ♻️ 新加坡自动, ♻️ 韩国自动, ♻️ 法国自动, ♻️ 德国自动, ♻️ 爱尔兰自动, ♻️ 印度自动, ♻️ 俄罗斯自动, ♻️ 英国自动, ♻️ 加拿大自动, ♻️ Next generation, ♻️ ASYNCHRONOUS, ♻️ 自动选择, 🌐 全部节点, 直连]}
proxy-groups:
  - {name: 🚀 默认代理, type: select, proxies: [🌐 全部节点]}
  - {name: 📹 YouTube, <<: *pr}
  - {name: 🍀 Google, <<: *pr}
  - {name: 🤖 ChatGPT, <<: *pr}
  - {name: 👨🏿‍💻 GitHub, <<: *pr}
  - {name: 🐬 OneDrive, <<: *pr}
  - {name: 🪟 Microsoft, <<: *pr}
  - {name: 🎵 TikTok, <<: *pr}
  - {name: 📲 Telegram, <<: *pr}
  - {name: 🎥 NETFLIX, <<: *pr}
  - {name: ✈️ Speedtest, <<: *pr}
  - {name: 💶 PayPal, <<: *pr}
  - {name: 🍎 Apple, <<: *pr}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: 🐟 漏网之鱼, type: select, proxies: [直连, 🚀 默认代理]}
  - {name: HK 香港节点, type: select, include-all: true, filter: "(?=.*(港|香港|HK|(?i)Hong))^((?!(台|日|韩|新|美|上海)).)*$"}
  - {name: US 美国节点, type: select, include-all: true, filter: "(?=.*(美|美国|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: JP 日本节点, type: select, include-all: true, filter: "(?=.*(日|日本|JP|(?i)Japan))^((?!(港|台|韩|新|美|海外)).)*$"}
  - {name: SG 新加坡节点, type: select, include-all: true, filter: "(?=.*(新|新加坡|SG|(?i)Singapore))^((?!(港|台|韩|日|美)).)*$"}
  - {name: KR 韩国节点, type: select, include-all: true, filter: "(?=.*(韩|韩国|KR|(?i)Korea))^((?!(港|台|日|新|美)).)*$"}
  - {name: FR 法国节点, type: select, include-all: true, filter: "法国"}
  - {name: DE 德国节点, type: select, include-all: true, filter: "德国"}
  - {name: IE 爱尔兰节点, type: select, include-all: true, filter: "爱尔兰"}
  - {name: IN 印度节点, type: select, include-all: true, filter: "印度"}
  - {name: RU 俄罗斯节点, type: select, include-all: true, filter: "俄罗斯"}
  - {name: UK 英国节点, type: select, include-all: true, filter: "英国"}
  - {name: CA 加拿大节点, type: select, include-all: true, filter: "加拿大"}
  - {name: Next generation节点, type: select, include-all: true, filter: "(?i)diztna"}
  - {name: ASYNCHRONOUS节点, type: select, include-all: true, filter: "(?i)ASYNCHRONOUS"}
  - {name: ♻️ 香港自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|香港|HK|(?i)Hong))^((?!(台|日|韩|新|美|上海)).)*$"}
  - {name: ♻️ 美国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|美国|US|(?i)States|America))^((?!(港|台|日|韩|新)).)*$"}
  - {name: ♻️ 日本自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|日本|JP|(?i)Japan))^((?!(港|台|韩|新|美|海外)).)*$"}
  - {name: ♻️ 新加坡自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新|新加坡|SG|(?i)Singapore))^((?!(港|台|韩|日|美)).)*$"}
  - {name: ♻️ 韩国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(韩|韩国|KR|(?i)Korea))^((?!(港|台|日|新|美)).)*$"}
  - {name: ♻️ 法国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "法国"}
  - {name: ♻️ 德国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "德国"}
  - {name: ♻️ 爱尔兰自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "爱尔兰"}
  - {name: ♻️ 印度自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "印度"}
  - {name: ♻️ 俄罗斯自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "俄罗斯"}
  - {name: ♻️ 英国自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "英国"}
  - {name: ♻️ 加拿大自动, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "加拿大"}
  - {name: ♻️ Next generation, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)diztna"}
  - {name: ♻️ ASYNCHRONOUS, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?i)ASYNCHRONOUS"}
  - {name: ♻️ 自动选择, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "^((?!(直连|海外|临时|IPV6)).)*$"}
  - {name: 🌐 全部节点, type: select, include-all: true}

rules:
  - DOMAIN-SUFFIX,qichiyu.com,🚀 默认代理
  - RULE-SET,private_domain,直连
  - RULE-SET,apple_domain,🍎 Apple
  - RULE-SET,proxylite,🚀 默认代理
  - RULE-SET,ai,🤖 ChatGPT
  - RULE-SET,github_domain,👨🏿‍💻 GitHub
  - RULE-SET,youtube_domain,📹 YouTube
  - RULE-SET,google_domain,🍀 Google
  - RULE-SET,onedrive_domain,🐬 OneDrive
  - RULE-SET,microsoft_domain,🪟 Microsoft
  - RULE-SET,tiktok_domain,🎵 TikTok
  - RULE-SET,speedtest_domain,✈️ Speedtest
  - RULE-SET,telegram_domain,📲 Telegram
  - RULE-SET,netflix_domain,🎥 NETFLIX
  - RULE-SET,paypal_domain,💶 PayPal
  - RULE-SET,gfw_domain,🚀 默认代理
  - RULE-SET,geolocation-!cn,🚀 默认代理
  - RULE-SET,cn_domain,🎯 直连
  - RULE-SET,google_ip,🍀 Google,no-resolve
  - RULE-SET,netflix_ip,🎥 NETFLIX,no-resolve
  - RULE-SET,telegram_ip,📲 Telegram,no-resolve
  - RULE-SET,cn_ip,🎯 直连
  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
